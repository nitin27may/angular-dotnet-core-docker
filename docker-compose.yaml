version: '3.8'

networks:
  my-contacts:
    driver: bridge 

services:
  frontend:
    image: frontend:latest
    depends_on:
      - "api"
    build: 
      context: frontend/.
      dockerfile: Dockerfile
    ports: 
      - "4000:4000"
    networks:
      - my-contacts 

  api:
    # image: api:latest
    #restart: always
    depends_on:
       postgres:
          condition: service_healthy
    #command: bash -c 'while !</dev/tcp/db/5432; do sleep 1; done; dotnet WebApi.dll'    
    build:
      context: Api/.
      dockerfile: Dockerfile
    ports:
      - 8000:8000 
    links:
      - postgres
    environment:
      ConnectionStrings:DefaultConnection: "Server=postgres;Database=contactdb;username=root;password=root"
      ConnectionStrings:IdentityConnection: "Server=postgres;database=contactdb;username=root;password=root"
    networks:
      - my-contacts  
  postgres:
    container_name: pg_container
    image: postgres
    restart: always
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: root
      POSTGRES_DB: contactdb
    ports:
      - 5432:5432
    volumes:
     - dbdata1:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U root -d contactdb"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - my-contacts  

  pgadmin:
    image: dpage/pgadmin4
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: root
    ports:
      - 5050:80
    networks:
      - my-contacts

  db-migration:
    depends_on:
        postgres:
          condition: service_healthy
          
    build:
      context: Api/.
      dockerfile: Migration.Dockerfile
    environment:
      ConnectionStrings:DefaultConnection: "Server=postgres;Database=contactdb;username=root;password=root"
      ConnectionStrings:IdentityConnection: "Server=postgres;database=contactdb;username=root;password=root"
    networks:
      - my-contacts  

  nginx: #name of the fourth service
    build: loadbalancer # specify the directory of the Dockerfile
    container_name: loadbalancer_nginx
    restart: always
    ports:
      - "80:80" #specify ports forewarding
    links:
      - api
      - frontend
    networks:
      - my-contacts 
volumes:
  dbdata1: